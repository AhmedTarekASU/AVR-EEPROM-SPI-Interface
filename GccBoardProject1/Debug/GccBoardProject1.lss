
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b51  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e2  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bfc  00000000  00000000  00001607  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000fbfb  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000413  00000000  00000000  00011ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00012306  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002462  00000000  00000000  0001235e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	49 d0       	rcall	.+146    	; 0xf4 <main>
  62:	91 c0       	rjmp	.+290    	; 0x186 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <SPI_MasterInit>:

void SPI_SlaveInit()
{
	DDRB &= ~(1<<6);
	SPCR = 0x43;
	SPSR = 0x00;
  66:	87 b3       	in	r24, 0x17	; 23
  68:	80 6b       	ori	r24, 0xB0	; 176
  6a:	87 bb       	out	0x17, r24	; 23
  6c:	83 e5       	ldi	r24, 0x53	; 83
  6e:	8d b9       	out	0x0d, r24	; 13
  70:	1e b8       	out	0x0e, r1	; 14
  72:	08 95       	ret

00000074 <MSPI_voidSendData>:
}

void MSPI_voidSendData(uint8_t Data)
{
	SPDR = Data;
  74:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  76:	77 9b       	sbis	0x0e, 7	; 14
  78:	fe cf       	rjmp	.-4      	; 0x76 <MSPI_voidSendData+0x2>
}
  7a:	08 95       	ret

0000007c <MSPI_voidRecieveData>:

uint8_t MSPI_voidRecieveData()
{
	while(!(SPSR&(1<<SPIF)));
  7c:	77 9b       	sbis	0x0e, 7	; 14
  7e:	fe cf       	rjmp	.-4      	; 0x7c <MSPI_voidRecieveData>
	return SPDR;
  80:	8f b1       	in	r24, 0x0f	; 15
  82:	08 95       	ret

00000084 <EEPROM_voidSend16Byte>:
	PORTB |= (1<<4);
	_delay_ms(5);
}

void EEPROM_voidSend16Byte(uint16_t copy_u16Address, uint8_t *copy_u8Data)
{
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	c8 2f       	mov	r28, r24
  8e:	8b 01       	movw	r16, r22
	PORTB |= (1<<4);
  90:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1<<4);
  92:	c4 98       	cbi	0x18, 4	; 24
	MSPI_voidSendData(0x06);
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	ee df       	rcall	.-36     	; 0x74 <MSPI_voidSendData>
	PORTB |= (1<<4);
  98:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	81 ee       	ldi	r24, 0xE1	; 225
  9c:	94 e0       	ldi	r25, 0x04	; 4
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <EEPROM_voidSend16Byte+0x1a>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <EEPROM_voidSend16Byte+0x20>
  a4:	00 00       	nop
	_delay_ms(5);
	PORTB &= ~(1<<4);
  a6:	c4 98       	cbi	0x18, 4	; 24
	MSPI_voidSendData(0x02);
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	e4 df       	rcall	.-56     	; 0x74 <MSPI_voidSendData>
	MSPI_voidSendData(copy_u16Address);
  ac:	8c 2f       	mov	r24, r28
  ae:	e2 df       	rcall	.-60     	; 0x74 <MSPI_voidSendData>
  b0:	e8 01       	movw	r28, r16
  b2:	06 5f       	subi	r16, 0xF6	; 246
  b4:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint8_t i=0; i<=9; i++)
		MSPI_voidSendData(copy_u8Data[i]);
  b6:	89 91       	ld	r24, Y+
  b8:	dd df       	rcall	.-70     	; 0x74 <MSPI_voidSendData>
  ba:	c0 17       	cp	r28, r16
	PORTB |= (1<<4);
	_delay_ms(5);
	PORTB &= ~(1<<4);
	MSPI_voidSendData(0x02);
	MSPI_voidSendData(copy_u16Address);
	for(uint8_t i=0; i<=9; i++)
  bc:	d1 07       	cpc	r29, r17
  be:	d9 f7       	brne	.-10     	; 0xb6 <EEPROM_voidSend16Byte+0x32>
  c0:	c4 9a       	sbi	0x18, 4	; 24
		MSPI_voidSendData(copy_u8Data[i]);
	PORTB |= (1<<4);
  c2:	81 ee       	ldi	r24, 0xE1	; 225
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <EEPROM_voidSend16Byte+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <EEPROM_voidSend16Byte+0x48>
  cc:	00 00       	nop
  ce:	df 91       	pop	r29
	_delay_ms(5);
}
  d0:	cf 91       	pop	r28
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <EEPROM_u8ReadData>:
  d8:	cf 93       	push	r28

uint8_t EEPROM_u8ReadData(uint16_t copy_u16Address)
{
  da:	c8 2f       	mov	r28, r24
	uint8_t Local_u8Dummy = 0xFF;
	uint8_t Local_u8Data;
	PORTB |= (1<<4);
  dc:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1<<4);
  de:	c4 98       	cbi	0x18, 4	; 24
	MSPI_voidSendData(0x03);
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	c8 df       	rcall	.-112    	; 0x74 <MSPI_voidSendData>
	MSPI_voidSendData(copy_u16Address);
  e4:	8c 2f       	mov	r24, r28
  e6:	c6 df       	rcall	.-116    	; 0x74 <MSPI_voidSendData>
	MSPI_voidSendData(Local_u8Dummy);
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	c4 df       	rcall	.-120    	; 0x74 <MSPI_voidSendData>
	Local_u8Data = MSPI_voidRecieveData();
  ec:	c7 df       	rcall	.-114    	; 0x7c <MSPI_voidRecieveData>
  ee:	c4 9a       	sbi	0x18, 4	; 24
	PORTB |= (1<<4);
  f0:	cf 91       	pop	r28
	return Local_u8Data;
  f2:	08 95       	ret

000000f4 <main>:
  f4:	cf 93       	push	r28
#include <util/delay.h>
#include "EEPROM_Interface.h"
#include "SPI_INTERFACE.h"

int main (void)
{
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	2a 97       	sbiw	r28, 0x0a	; 10
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
	uint8_t Local_u8represent;
	DDRC = 0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	84 bb       	out	0x14, r24	; 20
	SPI_MasterInit();
 10c:	ac df       	rcall	.-168    	; 0x66 <SPI_MasterInit>
 10e:	81 ee       	ldi	r24, 0xE1	; 225
 110:	94 e0       	ldi	r25, 0x04	; 4
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x1e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x24>
 118:	00 00       	nop
	_delay_ms(5);
	Local_u8represent = EEPROM_u8ReadData(0x00);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	dc df       	rcall	.-72     	; 0xd8 <EEPROM_u8ReadData>
	if(Local_u8represent==0xFF)
 120:	8f 3f       	cpi	r24, 0xFF	; 255
 122:	e9 f4       	brne	.+58     	; 0x15e <main+0x6a>
	{
		uint8_t arr[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x6F};
 124:	be 01       	movw	r22, r28
 126:	6f 5f       	subi	r22, 0xFF	; 255
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	fb 01       	movw	r30, r22
 12e:	11 92       	st	Z+, r1
 130:	8a 95       	dec	r24
 132:	e9 f7       	brne	.-6      	; 0x12e <main+0x3a>
 134:	8f e3       	ldi	r24, 0x3F	; 63
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	8a 83       	std	Y+2, r24	; 0x02
 13c:	8b e5       	ldi	r24, 0x5B	; 91
 13e:	8b 83       	std	Y+3, r24	; 0x03
 140:	8f e4       	ldi	r24, 0x4F	; 79
 142:	8c 83       	std	Y+4, r24	; 0x04
 144:	86 e6       	ldi	r24, 0x66	; 102
 146:	8d 83       	std	Y+5, r24	; 0x05
 148:	8d e6       	ldi	r24, 0x6D	; 109
 14a:	8e 83       	std	Y+6, r24	; 0x06
 14c:	8d e7       	ldi	r24, 0x7D	; 125
 14e:	8f 83       	std	Y+7, r24	; 0x07
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	88 87       	std	Y+8, r24	; 0x08
 154:	8f e6       	ldi	r24, 0x6F	; 111
 156:	89 87       	std	Y+9, r24	; 0x09
		EEPROM_voidSend16Byte(0x00, arr);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	93 df       	rcall	.-218    	; 0x84 <EEPROM_voidSend16Byte>
#include <util/delay.h>
#include "EEPROM_Interface.h"
#include "SPI_INTERFACE.h"

int main (void)
{
 15e:	00 e0       	ldi	r16, 0x00	; 0

	while(1)
	{
		for(uint8_t i=0; i<10; i++)
		{
			Local_u8represent = EEPROM_u8ReadData(0x00+i);
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	c8 01       	movw	r24, r16
 164:	b9 df       	rcall	.-142    	; 0xd8 <EEPROM_u8ReadData>
			PORTC = Local_u8represent;
 166:	85 bb       	out	0x15, r24	; 21
 168:	ff e3       	ldi	r31, 0x3F	; 63
 16a:	2d e0       	ldi	r18, 0x0D	; 13
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	f1 50       	subi	r31, 0x01	; 1
 170:	20 40       	sbci	r18, 0x00	; 0
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x7a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x84>
 178:	00 00       	nop
 17a:	0f 5f       	subi	r16, 0xFF	; 255
 17c:	1f 4f       	sbci	r17, 0xFF	; 255
		EEPROM_voidSend16Byte(0x00, arr);
	}

	while(1)
	{
		for(uint8_t i=0; i<10; i++)
 17e:	0a 30       	cpi	r16, 0x0A	; 10
 180:	11 05       	cpc	r17, r1
 182:	79 f7       	brne	.-34     	; 0x162 <main+0x6e>
 184:	ec cf       	rjmp	.-40     	; 0x15e <main+0x6a>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
